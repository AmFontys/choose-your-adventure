plugins {
    id 'org.springframework.boot' version '2.7.3'
    id "org.sonarqube" version "3.4.0.2513"
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id "jacoco"
}

group 'nl.ChooseYourAdventure'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'junit:junit:4.13.1'
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test:5.2.1.RELEASE'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'

}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            //Less important files that can be included are the controller

            //exclue some of the paths to make a jacocotest
            fileTree(dir: it, exclude: [
                    "**/nl/chooseyouradventure/Main.*",
                    "**/controller/*",
                    "nl/chooseyouradventure/**/*DTO.*",
                    "**/configuration/**",
                    "nl/chooseyouradventure/configuration/security/SecurityConfiguration.java",
                    "nl/chooseyouradventure/configuration/**",
                    "nl/chooseyouradventure/configuration/security/*",
                    "nl/chooseyouradventure/configuration/security/auth/*",
                    "nl/chooseyouradventure/configuration/security/isauthenticated/*",
                    "nl/chooseyouradventure/security/authentication/DatabaseUserDetail*",

            ])
        }))
    }

    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.projectKey", "AdventureHub"
        property "sonar.qualitygate.wait", true
        property "sonar.login","admin"
        property "sonar.password","admin1"
 	  property "sonar.core.codeCoveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", 'build/reports/jacoco/test/jacocoTestReport.xml'
        
    }
}

tasks.named('sonarqube').configure {
    dependsOn jacocoTestReport
}